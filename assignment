1 What is the purpose of Python's OOP?
answer:-- it allows us to develop applications using an Object-Oriented approach.
In Python, we can easily create and use classes and objects. 
An object-oriented paradigm is to design the program using classes and objects.

Q2. Where does an inheritance search look for an attribute?
answer:--An inheritance search looks for an attribute first in the instance object,
then in the class the instance was created from, then in all higher superclasses, progressing from left to right (by default).

Q3. How do you distinguish between a class object and an instance object?
answer:-- A class is a type of blueprint that you can use to make objects.
A concrete 'thing' that you constructed using a certain class is an object, which is an instance of a class.

Q4. What makes the first argument in a class’s method function special?
answer:-- A class method is similar to an instance method, but it has a class object passed as its first argument.
Recall that, when an instance method is called from an instance object,
that instance object is automatically passed as the first argument to the method.

Q5. What is the purpose of the init method?
answer:--The __init__ method lets the class initialize the object's attributes and serves no other purpose.

Q6. What is the process for creating a class instance?
To create instances of a class, you call the class using class name and pass in whatever arguments its __init__ method accepts.

Q7. What is the process for creating a class?
answer:--Create class.
Enter the class name. (Optional) To enter a short description, grade level, or class time, tap Section and enter the details.

Q8. How would you define the superclasses of a class?
answer:-- A class that is derived from another class is called a subclass (also a derived class, extended class, or child class).
The class from which the subclass is derived is called a superclass

Q9. What is the relationship between classes and modules?
answer:--A class is more of a unit, and a module is essentially a loose collection of stuff like functions, variables, or even classes.

Q10. How do you make instances and classes?
answer:-- The new operator requires a single, postfix argument: a call to a constructor.
The name of the constructor provides the name of the class to instantiate.

Q11. Where and how should be class attributes created?
answer:--Class attributes are the variables defined directly in the class that are shared by all objects of the class
The new operator returns a reference to the object it created.

Q12. Where and how are instance attributes created?
answer:--Instance attributes are defined in the constructor.

Q13. What does the term "self" in a Python class mean?
answer:--The self parameter is a reference to the current instance of the class

Q14. How does a Python class handle operator overloading?
answer:-- The operator overloading in Python means provide extended meaning beyond their predefined operational meaning.

Q15. When do you consider allowing operator overloading of your classes?
answer:-- Ensures that objects of a class behave consistently with built-in types and other user-defined types. 

Q16. What is the most popular form of operator overloading?
answer:-- The most frequent instance is the adding up operator '+',

Q17. What are the two most important concepts to grasp in order to comprehend Python OOP code?
answer:--Both inheritance and polymorphism

Q18. Describe three applications for exception processing.
answer:--Exception handling is the process of responding to unwanted or unexpected events when a computer program runs. 

Q19. What happens if you don't do something extra to treat an exception?
answer:-- the program terminates abruptly and the code past the line that caused the exception will not get executed.

Q20. What are your options for recovering from an exception in your script?
answer:-- The except block is executed when an exception occurs within the try block

Q21. Describe two methods for triggering exceptions in your script.
answer:-- Try – This method catches the exceptions raised by the program. 
Raise – Triggers an exception manually using custom exceptions

Q22. Identify two methods for specifying actions to be executed at termination time, regardless of
whether or not an exception exists.
answer:-- If no exception occurs during the execution, the execution will reach the break statement and the while loop will be left.

Q23. What is the purpose of the try statement?
answer:--The try statement allows you to define a block of code to be tested for errors while it is being executed.

Q24. What are the two most popular try statement variations?
answer:--  else and finally

Q25. What is the purpose of the raise statement?
answer:--The RAISE statement stops normal execution of a PL/SQL block or subprogram and transfers control to an exception handler.

Q26. What does the assert statement do, and what other statement is it like?
answer:-- The assert keyword lets you test if a condition in your code returns True, if not, the program will raise an AssertionError.

Q27. What is the purpose of the with/as argument, and what other statement is it like?
answer:--  More importantly, it ensures closing resources right after processing them

Q28. What are *args, **kwargs?
answer:--*args specifies the number of non-keyworded arguments that can be passed and the operations that can be performed on the function in Python
whereas **kwargs is a variable number of keyworded arguments that can be passed to a function that can perform dictionary operations.

Q29. How can I pass optional or keyword parameters from one function to another?
answer:-- To pass, collect the arguments using the * and ** in the function’s parameter list. 
Through this, you will get the positional arguments as a tuple and the keyword arguments as a dictionary.
Pass these arguments when calling another function by using * and ** −

Q30. What are Lambda Functions?
answer:-- A lambda function is a small anonymous function.
A lambda function can take any number of arguments, but can only have one expression.

Q31. Explain Inheritance in Python with an example?
answer:-- Inheritance relationship defines the classes that inherit from other classes as derived, subclass, or sub-type classes.

Q33. Which methods/functions do we use to determine the type of instance and inheritance?
answer:-- Use isinstance() to check an instance's type: isinstance(obj, int) will be True only if obj.__class__ is int or some class derived from int .
Use issubclass() to check class inheritance: issubclass(bool, int) is True since bool is a subclass of int.

Q34.Explain the use of the 'nonlocal' keyword in Python.
answer:-- The nonlocal keyword is used to work with variables inside nested functions, where the variable should not belong to the inner function. 

Q35. What is the global keyword?
answer:--Global keyword is used to modify the global variable outside its current scope and meaning.








